using System;
using System.Linq;
using System.Text;
using HashLib4CSharp.Base;
using HashLib4CSharp.Interfaces;
using HashLib4CSharp.Params;
using HashLib4CSharp.Utils;
using NUnit.Framework;

namespace HashLib4CSharp.Tests
{
    [TestFixture]
    internal class Shake_128Test : ShakeTestBase
    {
        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateShake_128(512);
            XofInstance = HashFactory.XOF.CreateShake_128(8000);

            HashOfEmptyData =
                "7F9C2BA4E88F827D616045507605853ED73B8093F6EFBC88EB1A6EACFA66EF263CB1EEA988004B93103CFB0AEEFD2A686E01FA4A58E8A3639CA8A1E3F9AE57E2";
            HashOfDefaultData =
                "10F69AD42A1BDE254004CD13B5176D6DAAD5E92198CD4715AA923017FFC809C4B3AA88E2CCBF4ABA98A0E9B7B49FC1A39ABAEC03F020CE4A72601B80E158F515";
            HashOfOneToNine =
                "1ACA6B9E651B5F20079A305CA8F86D39B9451C4C32873F95F8B315834BD5F272C3044114D6F3E2C2F5F4EAA1825FC80F8CE10CF3E7DE557408811F54D1AF85FD";
            HashOfSmallLettersAToE =
                "907C1B3F41470218D0DFD8FEDDDA93C1074F0D608F08980E4F17BE0853D0A684324815152908BE3DFB69D8A01EA8DD41A3413CD1F635F449D9875DE319469648";
            XofOfEmptyData =
                "7F9C2BA4E88F827D616045507605853ED73B8093F6EFBC88EB1A6EACFA66EF263CB1EEA988004B93103CFB0AEEFD2A686E01FA4A58E8A3639CA8A1E3F9"
                + "AE57E235B8CC873C23DC62B8D260169AFA2F75AB916A58D974918835D25E6A435085B2BADFD6DFAAC359A5EFBB7BCC4B59D538DF9A04302E10C8BC1CBF1A0B3A5120EA17CDA7CFA"
                + "D765F5623474D368CCCA8AF0007CD9F5E4C849F167A580B14AABDEFAEE7EEF47CB0FCA9767BE1FDA69419DFB927E9DF07348B196691ABAEB580B32D"
                + "EF58538B8D23F87732EA63B02B4FA0F4873360E2841928CD60DD4CEE8CC0D4C922A96188D032675C8AC850933C7AFF1533B94C834ADBB69C6115BAD4692D8619F90B0CDF8A7B9"
                + "C264029AC185B70B83F2801F2F4B3F70C593EA3AEEB613A7F1B1DE33FD75081F592305F2E4526EDC09631B10958F464D889F31BA010250FDA7F1368EC2967FC84EF2AE9AFF268E0B1700AFFC6820B523A3D917135F2DFF2EE06BFE72B3124721D"
                + "4A26C04E53A75E30E73A7A9C4A95D91C55D495E9F51DD0B5E9D83C6D5E8CE803AA62B8D654DB53D09B8DCFF273CDFEB573FAD8BCD45578BEC2E770D"
                + "01EFDE86E721A3F7C6CCE275DABE6E2143F1AF18DA7EFDDC4C7B70B5E345DB93CC936BEA323491CCB38A388F546A9FF00DD4E1300B9B2153D2041D205B443E41B45A653F2A5C4492C1ADD544512DDA2529833462B71A41A45BE97290B6F4CFFDA2CF990051634A4B1EDF6114F"
                + "B49083C1FA3B302EE097F051266BE69DC716FDEEF91B0D4AB2DE525550BF80DC8A684BC3B5A4D46B7EFAE7AFDC6292988DC9ACAE03F8634486C1ABE2781AAE4C02F3460D2CD4E6A"
                + "463A2BA9562EE623CF0E9F82AB4D0B5C9D040A269366479DFF0038ABFAF2E0FF21F36968972E3F104DDCBE1EB831A87C213162E29B34ADFA564D121E9F6E7729F4203FC5C6C22FA7A7350AFDDB6209"
                + "23A4A129B8ACB19EA10F818C30E3B5B1C571FA79E57EE304388316A02FCD93A0D8EE02BB85701EE4FF097534B502C1B12FBB95C8CCB2F548921D99CC7C9FE17AC991B675E631144423EEF7A5869168DA63D1F4C21F650C02923BFD396CA6A5DB541068624CBC5FFE208C0D1A74E1A29618D0BB60036F524"
                + "9ABFA88898E393718D6EFAB05BB41279EFCD4C5A0CC837CCFC22BE4F725C081F6AA090749DBA7077BAE8D41AF3FEC5A6EE1B8ADCD25E72DE36434584EF567C643D344294E8B2086B87F69"
                + "C3BDC0D5969857082987CA1C63B7182E86898FB9B8039E75EDA219E289331610369271867B145B2908293963CD677C9A1AE6CEB28289B254CDEB76B12F33CE5CF3743131BFB550F019"
                + "7BFE16AFF92367227ADC5074FE3DC0D8D116253980A38636BC9D29F799BBB2D76A0A5F138B8C73BA484D6588764E331D70C378C0641F2D9";
        }

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateShake_128(0));
    }

    [TestFixture]
    internal class Shake_256Test : ShakeTestBase
    {
        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateShake_256(512);
            XofInstance = HashFactory.XOF.CreateShake_256(8000);

            HashOfEmptyData =
                "46B9DD2B0BA88D13233B3FEB743EEB243FCD52EA62B81B82B50C27646ED5762FD75DC4DDD8C0F200CB05019D67B592F6FC821C49479AB48640292EACB3B7C4BE";
            HashOfDefaultData =
                "922279516284A34F384ADA776D3606FBEC97875E716E6EA0FFCF9372AAB696BEEFAB7C34CC5D1C926CEAD58FD4D6DB597C8620782541D7D7B47498FE4AF4B7A4";
            HashOfOneToNine =
                "24347B9C4B6DA2FC9CDE08C87F33EDD2E603C8DCD6840E6B3920F62B1DD69D7BC4655A9E6F0EE6255940380DCD1488DBCA3E796AE58A2234CC31CD61DFD1EB56";
            HashOfSmallLettersAToE =
                "98AD79D7ED29F585AD1AFFBC2BB5B5F244917F97CEA8B5424FDC6F7377A22042FD410C95237B587A0A13B10062034E1E3BF6B5766291CCC1F4C44229371991ED";
            XofOfEmptyData =
                "46B9DD2B0BA88D13233B3FEB743EEB243FCD52EA62B81B82B50C27646ED5762FD75DC4DDD8C0F200CB05019D67B592F6FC821C49479AB48640292EACB3B7C4BE141E96616FB13957692CC7EDD0B45AE3DC07223C8E92937BEF84BC0EAB862853349EC755"
                + "46F58FB7C2775C38462C5010D846C185C15111E595522A6BCD16CF86F3D122109E3B1FDD943B6AEC468A2D621A7C06C6A957C62B54DAFC3BE87567D677231395F6147293B68CEAB7"
                + "A9E0C58D864E8EFDE4E1B9A46CBE854713672F5CAAAE314ED9083DAB4B099F8E300F01B8650F1F4B1D8FCF3F3CB53FB8E9EB2EA203BDC970F50AE55428A91F7F53AC266B28419C3778A15FD248D339EDE785FB7F5A1AAA96D313EACC890936C173CDCD0FA"
                + "B882C45755FEB3AED96D477FF96390BF9A66D1368B208E21F7C10D04A3DBD4E360633E5DB4B602601C14CEA737DB3DCF722632CC77851CBDDE2AAF0A33A07B373445DF490CC8FC1E4160FF118378F11F0477DE055A81A9EDA57A4A2CFB0C83929D31091"
                + "2F729EC6CFA36C6AC6A75837143045D791CC85EFF5B21932F23861BCF23A52B5DA67EAF7BAAE0F5FB1369DB78F3AC45F8C4AC5671D85735CDDDB09D2B1E34A1FC066FF4A162CB263D6541274AE2FCC865F618ABE27C124CD8B074CCD516301B91875824D09958F341"
                + "EF274BDAB0BAE316339894304E35877B0C28A9B1FD166C796B9CC258A064A8F57E27F2A5B8D548A728C9444ECB879ADC19DE0C1B8587DE3E73E15D3CE2DB7C9FA7B58FFC0E87251773FAF3E8F3"
                + "E3CF1D4DFA723AFD4DA9097CB3C866ACBE" +
                "FAB2C4E85E1918990FF93E0656B5F75B08729C60E6A9D7352B9EFD2E33E3D1BA6E6D89EDFA671266ECE6BE7BB5AC948B737E41590ABE138CE1869C08680162F08863D174E77E07A9DDB33B57DE04C443A5BD77C42036871AAE7893362B"
                + "27015B84B4139F0E313579B4EF5F6B6426563D7195B8C5B84736B14266160342C4093F8ABEA48371BA94CC06DCB6B8A8E7BCE6354F9BABC949A5F18F8C9F0AAEFE0B8BECAD386F078CA41CACF2E3D17F4"
                + "EC21FED0E3B682435AD5B665C25D7B61B379E86824C2B22D5A54835F8B04D4C0B29667BAEB0C3258809EE698DBC03536A1C936C811F6E6F69210F5632080064923FDF9CF405301E45A3F96E3F57C55C4E0B538EFE8942F6B601AC49EA635F70"
                + "E4BA39E5FCE513CFB672945BB92E17F7D222EAB2AA29BE89FC3FF24BC6B6D7A3D307CE7B1731E7DF59690D0530D7F2F5BB9ED37D180169A6C1BB022252AB8CC6860E3CF1F1414C90A19350B526E3741E500717769CDD09D268CC3F88B5D521C70AA8BBE631FBF08905A0A833D2005830717"
                + "ADBA3233DD591BC505C7B13A9D5672AD4BE10C744AC33D9E92A23BDEE6E14D470EE7DC142FE4EFF4182A49BEEEC8E4";
        }

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateShake_256(0));
    }

    [TestFixture]
    internal class CShake_128Test : CShakeTestBase
    {
        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateCShake_128(ZeroByteArray, ZeroByteArray, 128);
            XofInstance = HashFactory.XOF.CreateCShake_128(ZeroByteArray, ZeroByteArray, 8000);
            XofInstanceShake = HashFactory.XOF.CreateShake_128(8000);
            XofInstanceCShakeWithN = HashFactory.XOF.CreateCShake_128(ZeroByteArray, EmailSignature, 128);

            HashOfEmptyData = "7F9C2BA4E88F827D616045507605853E";
            HashOfDefaultData = "10F69AD42A1BDE254004CD13B5176D6D";
            HashOfOneToNine = "1ACA6B9E651B5F20079A305CA8F86D39";
            HashOfSmallLettersAToE = "907C1B3F41470218D0DFD8FEDDDA93C1";
            XofOfEmptyData =
                "7F9C2BA4E88F827D616045507605853ED73B8093F6EFBC88EB1A6EACFA66EF263CB1EEA988004B93103CFB0AEEFD2A686E"
                + "01FA4A58E8A3639CA8A1E3F9AE57E235B8CC873C23DC62B8D260169AFA2F75AB916A58D974918835D25E6A435085B2BADFD6DFAAC359A5EFBB7BCC"
                + "4B59D538DF9A04302E10C8BC1CBF1A0B3A5120EA17CDA7CFAD765F5623474D368CCCA8AF0007CD9F5E4C849F167A580B14AABDEFAEE7EEF47CB0FCA9767BE1FDA69419DFB927E9DF07348B196691ABAEB580B32DEF58538B8D23F87732EA63B02B4FA0F4873360E2841928CD60DD4CEE8CC0D4C922A96188D0326"
                + "75C8AC850933C7AFF1533B94C834ADBB69C6115BAD4692D8619F90B0CDF8A7B9C264029AC185B70B83F2801F2F4B3F70C593EA3AEEB613A7F1B1DE33FD75081F592305F2E4526EDC09631B10958F464D889F31BA010250FDA7F1368EC2967FC84EF2AE9AFF268E0B1700AFFC6820B523A3D917135F2DFF2"
                + "EE06BFE72B3124721D4A26C04E53A75E30E73A7A9C4A95D91C55D495E9F51DD0B5E9D83C6D5E8CE803AA62B8D654DB53D09B8DCFF273CDFEB573FAD8BCD45578BEC2E770D01EFDE86E721A3F7C6CCE275DABE6E2143"
                + "F1AF18DA7EFDDC4C7B70B5E345DB93CC936BEA323491CCB38A388F546A9FF00DD4E1300B9B2153D2041D205B443E41B45A653F2A5C4492C1AD"
                + "D544512DDA2529833462B71A41A45BE97290B6F4CFFDA2CF990051634A4B1EDF6114FB49083C1FA3B302EE097F051266BE69DC716FDEEF91B0D4AB2DE525550BF80DC8A684BC3B5A4D46B7EFAE7AFDC6292988DC9ACAE03F8634486C1ABE2781AAE4C02F3460D2CD4E6A463A2BA956"
                + "2EE623CF0E9F82AB4D0B5C9D040A269366479DFF0038ABFAF2E0FF21F36968972E3F104DDCBE1EB831A87C213162E29B34ADFA564D121E9F6E7729F4203FC5C6C22FA7A7350AFDDB620923A4A129B8ACB19EA10F818C30E3B5B1C571FA79E57EE304388316A02FCD93A0D8EE02BB85701EE4FF09753"
                + "4B502C1B12FBB95C8CCB2F548921D99CC7C9FE17AC991B675E631144423EEF7A5869168DA63D1F4C21F650C02923BFD396CA6A5DB541068624CBC5FFE208C0D1A"
                + "74E1A29618D0BB60036F5249ABFA88898E393718D6EFAB05BB41279EFCD4C5A0CC837CCFC22BE4F725C081F6AA090749DBA7077BAE8D41AF3FEC5A6EE1B8ADCD2"
                + "5E72DE36434584EF567C643D344294E8B2086B87F69C3BDC0D5969857082987CA1C63B7182E86898FB9B8039E75EDA219E289331610369271867B145B2908293963CD677C9A1AE6CEB28289B254CDEB76B12F33CE5CF3743131BFB550F0197BFE16AFF92367227ADC5074FE3DC0D8D116253980A38636BC9D29F79"
                + "9BBB2D76A0A5F138B8C73BA484D6588764E331D70C378C0641F2D9";

            XofOfZeroToOneHundredAndNinetyNine = "C5221D50E4F822D96A2E8881A961420F";
        }

        [Test]
        public void TestSettingNullNThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateCShake_128(NullBytes, ZeroByteArray, 128));

        [Test]
        public void TestSettingNullSThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateCShake_128(ZeroByteArray, NullBytes, 128));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateCShake_128(ZeroByteArray, ZeroByteArray, 0));
    }

    [TestFixture]
    internal class CShake_256Test : CShakeTestBase
    {
        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateCShake_256(ZeroByteArray, ZeroByteArray, 256);
            XofInstance = HashFactory.XOF.CreateCShake_256(ZeroByteArray, ZeroByteArray, 8000);
            XofInstanceShake = HashFactory.XOF.CreateShake_256(8000);
            XofInstanceCShakeWithN = HashFactory.XOF.CreateCShake_256(ZeroByteArray, EmailSignature, 256);

            HashOfEmptyData = "46B9DD2B0BA88D13233B3FEB743EEB243FCD52EA62B81B82B50C27646ED5762F";
            HashOfDefaultData = "922279516284A34F384ADA776D3606FBEC97875E716E6EA0FFCF9372AAB696BE";
            HashOfOneToNine = "24347B9C4B6DA2FC9CDE08C87F33EDD2E603C8DCD6840E6B3920F62B1DD69D7B";
            HashOfSmallLettersAToE = "98AD79D7ED29F585AD1AFFBC2BB5B5F244917F97CEA8B5424FDC6F7377A22042";
            XofOfEmptyData =
                "46B9DD2B0BA88D13233B3FEB743EEB243FCD52EA62B81B82B50C27646ED5762FD75DC4DDD8C0F200CB05019D67B592F6FC821C49479AB48640292EACB3B7C4BE141E96616FB1395"
                + "7692CC7EDD0B45AE3DC07223C8E92937BEF84BC0EAB862853349EC75546F58FB7C2775C38462C5010D846C185C15111E595522A6BCD16CF86F3D122109E3B1FDD943B6AEC468A2D"
                + "621A7C06C6A957C62B54DAFC3BE87567D677231395F6147293B68CEAB7A9E0C58D864E8EFDE4E1B9A46CBE854713672F5CAAAE314ED9083DAB4B099F8E300F01B8650F1F4B1D8F"
                + "CF3F3CB53FB8E9EB2EA203BDC970F50AE55428A91F7F53AC266B28419C3778A15FD248D339EDE785FB7F5A1AAA96D313EACC890936C173CDCD0FAB882C45755FEB3AED96D47"
                + "7FF96390BF9A66D1368B208E21F7C10D04A3DBD4E360633E5DB4B602601C14CEA737DB3DCF722632CC77851CBDDE2AAF0A33A07B373445DF490CC8FC1E4160FF118378F11F0477DE"
                + "055A81A9EDA57A4A2CFB0C83929D310912F729EC6CFA36C6AC6A75837143045D791CC85EFF5B21932F23861BCF23A52B5DA67EAF7BAAE0F5FB1369DB78F3AC45F8C4AC5671D85735C"
                + "DDDB09D2B1E34A1FC066FF4A162CB263D6541274AE2FCC865F618ABE27C124CD8B074CCD516301B91875824D09958F341EF274BDAB0BAE316339894304E35877B0C28A9B1FD166C796B9CC"
                + "258A064A8F57E27F2A5B8D548A728C9444ECB879ADC19DE0C1B8587DE3E73E15D3CE2DB7C9FA7B58FFC0E87251773FAF3E8F3E3CF1D4DFA723AFD4DA9097CB3C866ACBEFAB2C4E85E1918990"
                + "FF93E0656B5F75B08729C60E6A9D7352B9EFD2E33E3D1BA6E6D89EDFA671266ECE6BE7BB5AC948B737E41590ABE138CE1869C08680162F08863D174E77E07A9DDB33B57DE04C"
                + "443A5BD77C42036871AAE7893362B27015B84B4139F0E313579B4EF5F6B6426563D7195B8C5B84736B14266160342C4093F8ABEA48371BA94CC06DCB6B8A8E7BCE6354F9BABC949A5F"
                + "18F8C9F0AAEFE0B8BECAD386F078CA41CACF2E3D17F4EC21FED0E3B682435AD5B665C25D7B61B379E86824C2B22D5A54835F8B04D4C0B29667BAEB0C3258809EE698DBC03536A1C"
                + "936C811F6E6F69210F5632080064923FDF9CF405301E45A3F96E3F57C55C4E0B538EFE8942F6B601AC49EA635F70E4BA39E5FCE513CFB672945BB92E17F7D222EAB2AA29BE89FC3F"
                + "F24BC6B6D7A3D307CE7B1731E7DF59690D0530D7F2F5BB9ED37D180169A6C1BB022252AB8CC6860E3CF1F1414C90A19350B526E3741E500717769CDD09D268CC3F8"
                + "8B5D521C70AA8BBE631FBF08905A0A833D2005830717ADBA3233DD591BC505C7B13A9D5672AD4BE10C744AC33D9E92A23BDEE6E14D470EE7DC142FE4EFF4182A49BEEEC8E4";

            XofOfZeroToOneHundredAndNinetyNine = "07DC27B11E51FBAC75BC7B3C1D983E8B4B85FB1DEFAF218912AC864302730917";
        }

        [Test]
        public void TestSettingNullNThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateCShake_256(NullBytes, ZeroByteArray, 256));

        [Test]
        public void TestSettingNullSThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateCShake_256(ZeroByteArray, NullBytes, 256));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateCShake_256(ZeroByteArray, ZeroByteArray, 0));
    }

    [TestFixture]
    internal class KMAC128XOFTest : KMACXOFTestBase
    {
        private const int OutputSizeInBits = 32 * 8;

        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateKMAC128XOF(ZeroByteArray, ZeroByteArray, 128);
            XofInstance = HashFactory.XOF.CreateKMAC128XOF(ZeroByteArray, ZeroByteArray, 8000);

            HashOfEmptyData = "3F9259E80B35E0719C26025F7E38A4A3";
            HashOfDefaultData = "724E3EEA4AB7C7B493963F4236D7ACAD";
            HashOfOneToNine = "0719366E1969ED79AFF51AE1F4B0633B";
            HashOfSmallLettersAToE = "A839214B8ED82E72DEB13112C6D9D8F7";
            XofOfEmptyData =
                "3F9259E80B35E0719C26025F7E38A4A38172BF1142A6A9C1930E50DF039043121C5ED07BE0252A132CE84DBFA0C541DCF0853B0294CA5BB"
                + "9B462C735FF6DB1F256D37207FE0BE125145C082A46CA323C47809B5B3364FFC58C83D987CE66BC9686881274CAF0579971FA8DD4495F379485D13C7F5A73F7686C615AA4B4236A95FF18C"
                + "FBA0D0FA4862254713BE5B3844AF7A194BD96DEDEE4D9D05258B00DB83836E1B09A5BA5D1461A57969A42E43D46E3A2391892D3EA7A713D49153B18975919B971110AB5BCB49BDFB1D44F78481F4CEF0A346560FF2C"
                + "3D7256F28989C10EEB44FE540DED2341309C39FCD8BE933E7523DFA8BE12BDB1FE3FE4BC3E635DE8C37373CE15E19F20FCE20F1592E125BCF495844FE98DF3E3E20857BAF2F3E8BC90F56D0A8DB"
                + "C0B6415887B5783EFCA1B0E4F4FDA93469DD2955A15922B8C0907C9BFF747DA6BD3828ADCA51D49BD8377FD25EBDAA1D33E66CB367"
                + "90C9072F62EC84E16D736656A05ACC8508817AE6B422CD630ED889BBB9186F83066D709F1FD4B2DA292C8127E3CAADC88301FCA6416CB7F692927064C0899C8D50951F"
                + "2D259CB4007F194E17A8EB1341433E9FE3150351ACA83B0E0D77614975C97B7CFD09811E1D7C4E05F0AC909AE8E0D1D52774A117C7A1482977FD88BC12C512"
                + "60D427A49F58FEB13039998EC9181E5016540FF18721DA6E0B295B9897FBED9592ACF46345E95FB8D66E95B0C43E485CED6928984AFD70940DE"
                + "B3A8F0E921A716C8A050BABE71BF5364F437807186D35F54EFECBC7EA4B89BFF3E3821BAEE751D1656A33628A1B03C9947AE66A4F9D6C3575D66CD0DFF696465DAE5C970C571CF6FF"
                + "94FC3F004C52AF00587AE9614683DBE354209167BB28D478BA38A4BF16EC6C0850AAB30685E1F5B16D0B597E4F1D0170DD4A73B66D5402ABA0780288E5DF1D491B2862E9007AACED6AA76DFF3EA0D8AB9982008C88836E5"
                + "81D650EF08BBD9BF1E1C7F63D86E5C4E9C767BD87F32E65D57CDD8ABA07486B6FB9848DA23B472A1FC453160DC6EE3931120DC53490D103017ED0FDAEB1B2138245A2E3E934B0E12EBBED26289B48567BF1D8AF4CF61CC87A55618D49C77C9BD7234DF6847C347F9E46F3E"
                + "9FF4D92530EAAF8F5BD0626B05F7B558783CBA23B62E7768208D438E3B36C1A6237D31DF9BB1EE1FD2B7F4E04C742F306AD241103FDF016666B9D5D5F5649B00743C94"
                + "A9E4893808754F1E41E74459E52E92DD04CB3209CB118F82481AA48D12224F38D0D202F57EE1AD83800585E9FB1638417D757E44CBF36186487337640C17065FC551EB4418348AF517FD3F22E5A40C7076F6067C6909FC74E0CA2BE140B6683E51D40D21403967FE9F5F9201EB8A56C3D84F40F06FE5B492C1DD24612C5163061D5883AC";
        }

        [Test]
        public void TestSettingNullKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateKMAC128XOF(NullBytes, ZeroByteArray, 128));

        [Test]
        public void TestSettingNullCustomizationThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateKMAC128XOF(ZeroByteArray, NullBytes, 128));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateKMAC128XOF(ZeroByteArray, ZeroByteArray, 0));

        [Test]
        public void TestNISTXOFSample1()
        {
            ExpectedString = "CD83740BBD92CCC8CF032B1481A0F4460E7CA9DD12B08A0C4031178BACD6EC35";
            var xofInstance = HashFactory.XOF.CreateKMAC128XOF(ASCIICharacterBytes, ZeroByteArray,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToThreeBytes);
        }

        [Test]
        public void TestNISTXOFSample2()
        {
            ExpectedString = "31A44527B4ED9F5C6101D11DE6D26F0620AA5C341DEF41299657FE9DF1A3B16C";
            var xofInstance = HashFactory.XOF.CreateKMAC128XOF(ASCIICharacterBytes, CustomizationMessageBytes,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToThreeBytes);
        }

        [Test]
        public void TestNISTXOFSample3()
        {
            ExpectedString = "47026C7CD793084AA0283C253EF658490C0DB61438B8326FE9BDDF281B83AE0F";
            var xofInstance = HashFactory.XOF.CreateKMAC128XOF(ASCIICharacterBytes, CustomizationMessageBytes,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToOneHundredAndNinetyNineBytes);
        }
    }

    [TestFixture]
    internal class KMAC256XOFTest : KMACXOFTestBase
    {
        private const int OutputSizeInBits = 64 * 8;

        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateKMAC256XOF(ZeroByteArray, ZeroByteArray, 256);
            XofInstance = HashFactory.XOF.CreateKMAC256XOF(ZeroByteArray, ZeroByteArray, 8000);

            HashOfEmptyData = "2C9683C318165466C0D3F9467CE77F0CEA513F643AE3BD5B0969165AAFAE3F71";
            HashOfDefaultData = "81EA035780ABD58788089419CC37BDF39204146FA2650FE1C8D1DB0B5F2E690B";
            HashOfOneToNine = "1C76E3A5D8814B5161FA6C99B9352C21BB68D29E09CDFFCE3CB67D589BD05CDF";
            HashOfSmallLettersAToE = "46109A951A39A1DF43D4916A9CC1C48EB606DE4AEA3DFF3735733E9ABD39BE63";
            XofOfEmptyData =
                "2C9683C318165466C0D3F9467CE77F0CEA513F643AE3BD5B0969165AAFAE3F7170D3D7AEEF324B53BCC4C63A1F13A30AA7BE47BC271016D0C8B4CC77D9561399DCD4A136E84AD557D"
                + "ADEF140AB12A1BA1B8B664B3A228FC5B781E4F62F1F3239B793938CCA4D95A292E53BCF115665BB974D434382E2DE6D9955176500BFE639B86B8BC661832A8A7DF51E5ADE20A1CEAAEE51F5AE474E153D69DA"
                + "BD345ECB53FDE0DAF8C1398C1F673F5D0D9037DA264B3CA728C094DAF2C8FD5A4A3E501931425DB34F7E716EF6C978FD752505FCD177E20EF045CC624CCEB8408A00EFD3EC7D7E9196DBBD6806F47F854EEC3484"
                + "DC79C70DECDA08ABBB9F042583E1FBB20C8A7A85B933296D203CE77F1B7701493381BD55A4F0E1BC52F76E13C53D4A26C885A1AD684BEE06C7EE9B36C40152EB2959B6B70A9022435C8"
                + "8A354BA4969CBFABBB5542ECD32C9C5DA2351771E3DA89BB8966007F021493121F61F246A35E9317C50AC6CD683CFC6A549CC162A342A6501C139093D95212B8AF2AD26B830BE0A85E55B728736547"
                + "EE89EE77A5204DB7E8D465E97B07554D6C2E979FF740861E6E7BA1F8D22650F11E6018F15603C468AC06F95F5666088D7252F877DB481820EFCA2F049D7ABA0A6043E0"
                + "4FC13A61FB04B8E125FED02D58F317383FDAE6E89BE9E4587D49D65216BED931D4192D528DB7FF8C8A76A41887161807416B981508911FEA53B86C945FE536C6A7CEAB77D9B5F572"
                + "D01A17046E9A5D747697B469246AD34600737EDB30D8A12C81BDBFB6DD65556E5F67E075F4195F27441E29F483D5EC34AC0D5C8F6306C956CE3237E4280A262503BE41DC36141238"
                + "B695C81C292D7D458C2D05E899CE1FDF818135EA62641C4526C62D02F537B4B555E2B5237007B98683CB0A92FA3B4B3C890F2E16D9C9F9DAD3DFE165B37E6CBCFD721DB6D901F634892F58B1601981180C2F817F383992"
                + "4986676C95CD14A0B52B06667C02AF8C95301699C19982A8F89D8AEDA397618C35FA6CAE4D3AEC18B251DA78A3D151FFB27C66BCD15EA1AFB2861F7FAEACC8E11A1C157C5888"
                + "2266CB47F7D4F5FD67E2B76FB2C92478EE7976F24F86A8E690390757023F93BFF04ECF61E6582701E90E3BD958BAC434E5B2CD14A42CF6DCAB0584F3B41B2AB"
                + "96273A0F70F3636532F4F9D175F1059C4F1E4AF407979A722D02301258120ADA51776D9C7B96764E271392C4AE714160AA3D6C31C1DD7CA6F66A2448DCC8E2BFF"
                + "A2F2999629721E2C877F8FD582B2F7C8265707545BCF74BA921B85166879863D486E0EBD226346003B91BDDA9C303F0E7E07216CE"
                + "DB8237D857776BA70259B1CA0E968F8D67354A78EF3AB2C02D481F3D5FDE5EB83D5AA29A8446246CAEA505B09CC9B48C061B4D8B4A1608E20CD72768";
        }

        [Test]
        public void TestSettingNullKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateKMAC256XOF(NullBytes, ZeroByteArray, 256));

        [Test]
        public void TestSettingNullCustomizationThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateKMAC256XOF(ZeroByteArray, NullBytes, 256));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateKMAC128XOF(ZeroByteArray, ZeroByteArray, 0));

        [Test]
        public void TestNISTXOFSample1()
        {
            ExpectedString =
                "1755133F1534752AAD0748F2C706FB5C784512CAB835CD15676B16C0C6647FA96FAA7AF634A0BF8FF6DF39374FA00FAD9A39E322A7C92065A64EB1FB0801EB2B";
            var xofInstance = HashFactory.XOF.CreateKMAC256XOF(ASCIICharacterBytes, CustomizationMessageBytes,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToThreeBytes);
        }

        [Test]
        public void TestNISTXOFSample2()
        {
            ExpectedString =
                "FF7B171F1E8A2B24683EED37830EE797538BA8DC563F6DA1E667391A75EDC02CA633079F81CE12A25F45615EC89972031D18337331D24CEB8F8CA8E6A19FD98B";
            var xofInstance = HashFactory.XOF.CreateKMAC256XOF(ASCIICharacterBytes, ZeroByteArray,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToOneHundredAndNinetyNineBytes);
        }

        [Test]
        public void TestNISTXOFSample3()
        {
            ExpectedString =
                "D5BE731C954ED7732846BB59DBE3A8E30F83E77A4BFF4459F2F1C2B4ECEBB8CE67BA01C62E8AB8578D2D499BD1BB276768781190020A306A97DE281DCC30305D";
            var xofInstance = HashFactory.XOF.CreateKMAC256XOF(ASCIICharacterBytes, CustomizationMessageBytes,
                OutputSizeInBits);
            DoComputeKMACXOF(xofInstance, ZeroToOneHundredAndNinetyNineBytes);
        }
    }

    [TestFixture]
    internal class Blake2XBTest : Blake2XTestBase
    {
        private const int HashSize = 64;

        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateBlake2XB(ZeroByteArray, 512);
            XofInstance = HashFactory.XOF.CreateBlake2XB(ZeroByteArray, 8000);

            HashOfEmptyData =
                "C5EF3D8845B9B2BA8EA28E9326C9E46E7A5843AD42BACAF927798BEAF554A43CA0830CCF8BB4A24CE1B1D82BD2DA971AFB2BE73919CC5FFF8E7C6A20F87284FA";
            HashOfDefaultData =
                "9A4C47E816EF6A06F9708B8AE2FEE224F18565CE1F08B848945B73A961BB5E83D79B3A71BE6E324243483C265007A2CD67DE3150C26DC799CE7FC201981AC80A";
            HashOfOneToNine =
                "3FD021E013DF681EE479A6E3CE7D36E53971946C586147D59EECF1634C31C318F03BBCE3CDB0B1EC5CD4BD4EDF8ED1441A37754899BB3D8850FCA5EBE0639ABB";
            HashOfSmallLettersAToE =
                "81B9FF044391492C89822F8A96279128E876FC5326B0C5C83552B503409F1A6A6CA66DAECE711FE4FCC5DBD92D8560172A64472FAF845CAA7F4297E17ECA1283";
            XofOfEmptyData =
                "85DDB224AFA3113F145AC1AA3618BD7496FDC79AF14372734A2CDCE9E8DA30029454BAF1C2D78D528F011B3F3FE824CF05B28C4CF34791B3595AC30AB7B348F"
                + "23084628A4315036BE75EDCBE93E217B922E7D8E8CD5EBC35580BC2909432E74506C0080718198A87F44BF22B83DE6FCBE6AC98965D9D8B83F37AACB75064FD6205762BA7CDFFF6F4B83"
                + "672D5296D8D550FDE5B8D16E465D95C26DE2819DA44130EAA3698EC5F2F892133E8F20948523CEE89F01723078FA2E4BE0395638CFAF7F05265C43FF7C08A03EDA0516476CD6C9D14B560E"
                + "7B1FE6E7D59BD658B434755CC58F1780ADE865EA9D365949BF7D260C46452FFF6CBFA9AB54EED5725E9A4E747F4C8C40F1BBAFCE1EEDDE87476924B78B8F7D61ABC93087327CD3220A"
                + "088C757B6E5E8C3A2530B08F7710D4E79E7EBA9C1B839A32E941D934D8B675B5029FE5AC6F00E64F5432DB9E40DFFD9C85A28D2D1786C51026F5AFCB06FD58414E12FF94A50D3F583885"
                + "F5547605C11BF0C3F9CA71AC9EE9B4D5499A92FE4D765F48F9AE48441E65B384B14946F9A639B53CECB91636A9C14246B769FE7A3E6AAFD131110F3ABF157887A18EFFA5CA80887C358F5F"
                + "7292A09F3AB997D3FD4D08E2178F358F46B8862F220E495940BD60BF96FA219B0B90383E5FBF4DF496E922354DE70363583932F440E839093E3DB3615A3A38A3EF79BEFCA3C8B10FA55"
                + "FB997E6B25EB68DF7AD4A69FF2B9D20CB3EC981143CEC641732C4FFB899E1496CF8920167097BE4AD3448385FB25C5BE411027798E89ADC79F8225DE42E292C02D24BD2356F9C9D"
                + "CA502C0A1671BB7D25D91A038A6634670C9E9E668B18124C56CBC3FC7E56A01E8BAF23463DC2ACFEDF572070BD3EAD179CD4008A198EE0A544A975D401A5CED306A861FF23D17D91F67F"
                + "F2F7CF453F9C444DDFCA81761C482299E098FEA53CD8C809B5E3F5AFEF857BFE918833EBF7B7B272DC014967F5610E39CD09EB8E7AB662F4DFD0CEF98DEC5F95307AA900EF27DF36373FE31"
                + "6DCB951C623729B26F61723B73AD442250F8C2EC7033447795860232B9012B4C837EA47E0F69A9C4A0489AD7BC48BC58BB8EB948BBAC2A638549EDE38B215ABFC30FBEB29F255A9C710A2"
                + "29B4070A5B09D894E1460DD577173892779BBA4257B60FCC9253BE3E6350221CE615438A04C86E3D6FAB218DE5947459B93D02D00C771F8F3820BABCAE18ADF599649F7716C7CECE86866B"
                + "E1B03FC5390199A7607CA7E45CDAD99411A850125C90AD526C2008293185C1B5B008A458F8F885C8614F317ED52DBAF3E82D0A4B0E47E41C63F145FB17B994B5E9829D8138876A3ADA"
                + "872FD00914654D504245150B178B919D9F9A7219DB86595D3AACA009798FB52DD0D28F8FFBE4D75063EFD98E655CDEE16";
        }

        [Test]
        public void TestSettingNullKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                HashFactory.XOF.CreateBlake2XB(NullBytes, 512));

        [Test]
        public void TestSettingOutOfRangeKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                HashFactory.XOF.CreateBlake2XB(new byte[HashSize + 1], 512));

        [Test]
        public void TestSettingEmptyKeyDoesNotThrowsException() =>
            Assert.DoesNotThrow(() =>
                HashFactory.XOF.CreateBlake2XB(ZeroByteArray, 512));

        [Test]
        public void TestSettingOutOfRangeSaltThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Salt = new byte[17]}, null), 512));

        [Test]
        public void TestSettingNullSaltThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Salt = NullBytes}, null), 512));

        [Test]
        public void TestSettingEmptySaltDoesNotThrow() =>
            Assert.DoesNotThrow(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Salt = ZeroByteArray}, null), 512));

        [Test]
        public void TestSettingNullPersonalizationThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Personalization = NullBytes},
                        null),
                    512));

        [Test]
        public void TestSettingOutOfRangePersonalizationThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Personalization = new byte[17]},
                        null),
                    512));

        [Test]
        public void TestSettingEmptyPersonalizationDoesNotThrowsException() =>
            Assert.DoesNotThrow(() =>
                _ = HashFactory.XOF.CreateBlake2XB(
                    Blake2XBConfig.CreateBlake2XBConfig(new Blake2BConfig(HashSize) {Personalization = ZeroByteArray},
                        null),
                    512));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                HashFactory.XOF.CreateBlake2XB(ZeroByteArray, 0));

        [Test]
        public void TestCheckTestVectors()
        {
            var data = Converters.ConvertHexStringToBytes(Blake2BTestVectors.Blake2XBXofTestInput);
            foreach (var vector in Blake2BTestVectors.Blake2XBXofTestVectors)
            {
                var key = Converters.ConvertHexStringToBytes(vector[0]);

                ActualString = HashFactory.XOF.CreateBlake2XB(key, (ulong) ((vector[1].Length >> 1) * 8))
                    .ComputeBytes(data).ToString();
                ExpectedString = vector[1];

                AssertAreEqual(ExpectedString.ToUpper(), ActualString);
            }
        }
    }

    [TestFixture]
    internal class Blake2XSTest : Blake2XTestBase
    {
        private const int HashSize = 32;

        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateBlake2XS(ZeroByteArray, 256);
            XofInstance = HashFactory.XOF.CreateBlake2XS(ZeroByteArray, 8000);

            HashOfEmptyData =
                "F4B358457E5563FB54DF3060AEC26EA3AA1C959CF89F55A22538117ECF708BFC";
            HashOfDefaultData =
                "5ADFC3100CED2EDF93D530E747544B1FF88981E2C8BF4BCA95C434FAEA991718";
            HashOfOneToNine =
                "EA2BBB210CCC659A88EEE6D07900D719E26D801CC6A5E6214214EBA376FF28A5";
            HashOfSmallLettersAToE =
                "3B42907077820444C727CF6B1FD6CC5E9BF8AA5489F57010670D4045AC0A1466";
            XofOfEmptyData =
                "217B64B104155F7158277FC5B0AFB954138C93A6F1269DC4C642A781BA20EB24B3B4B5C7E6C13645DD584D851BD4280B24E1DBA29C512D3CBD6A5C84A708C1D536A6654DDD1D8E3"
                + "885F0B520092E264C73BD11F8788F2841D9B5004CD643F3E39F4188A20A0E0F639E61B45759C68A7DA76CD657F71EB35E1CBC01D16B6DA21CE30CB6E9328451DB8B3F47323CDB0EBBB1BFA"
                + "F1D038D8F6721B8A6268CE955FD58A08F2F38F18B6E51E4E787BC171C737CED8988D912F91A89FD8DB0F3BEC0BA9117E05A916350067A2AC55ED14D7B51A77C9D5B368D58871A6687424CC2C"
                + "A92FC2F8FD6B1830548B8EC2B10E402F14DF43AAB9F93D73CDE95B14E667D2F00928192651D0681A4C8D9AF7951656162230792D49526E59AE204984E45E3D08F439C04B711E06AC4EB073AD18D95"
                + "8E1D853AA463D05646C98C37941CA909C6E6040983120DEE9EB99D03EBD6766D20909481979897B20E34AF07A2EA96637E9F8E9AAFB6A813360C392710D2A408FB6C5F24980ACCB106468"
                + "61B111BD5716DDAF96F3740BD6D10645DE8632C44643939D9C3CA8795F145DA32A61A7903EEFA12040A4AC9AC237C3DCD8BE742B384E1E60B37F8F471A7E9122498E48236783DAD631120C8E"
                + "A8274F07592FBFF612227EBDB550E954BBA0E8BE25562C7344E5C124FCD96F6F272EF8092BC926735C812873228FE063C8F7B9C54CA7A401AF98A7CA8820D7055BA3B82B8F286B67B415F469"
                + "D4A847ADA022AD05FCB75A27BFA3426225DD2C6D62A77EFD8B2A61AE7726876A658EF872B44625D42EA6005BF2207A33D210083B43555F16C60BE798F54080510B9EF53E181C3EA"
                + "FA675818A5255A8E963B22170EA2C42AF9534AF29FC58DA8289F5BEB1B2F5CBA50DE3D9E3F2AA34A992B7634B780F8D8367274EECF4ACE2FDE88B92CCA35064521BA335C375C4F285F2537FF34"
                + "53F1E1F00D4CFDD91F5F349774DA1BC2D30D7BC0FC84CC087F056FB2425C00C5BD4B79BD048FE79048603961D8910F00EBA4200AF31FD77A9F6D5C051BE29A9555D829F236C425BB65531B"
                + "13E4ED3C7F4EEE77014AE46D1E99D32087AA0B4A984A4DEF9A258376F985820BBF97E5A2702F56EC3FD353F552042CDC9D09502393C2DD702CB434AADD632BB8C562010950C865CC890002"
                + "6D1A7414FD402F5092C7787E7A74238F866EBB623A5DF76B2A5BF916328B6C612CE53694263C7DEFFC8B3245771C22C585C3FFA9932875A439CF2E2ECE68CD24DFDB2CC40813F348411AF7026F662AFCEE1"
                + "3EB53418FB69257FF807691FA896E6486D54FD991E927C492D15C0C9B01D905FAD6FFA294C484DFA6B74400CBDD414A85D458DBFFC366C2AFACCEC7E4EA8D7AB75F52FAAD995ED9CB45D"
                + "C69A8D906E1C09A60DEF1447A3D724F54CCE6";
        }

        [Test]
        public void TestSettingNullKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                HashFactory.XOF.CreateBlake2XS(NullBytes, 256));

        [Test]
        public void TestSettingOutOfRangeKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                HashFactory.XOF.CreateBlake2XS(new byte[HashSize + 1], 256));

        [Test]
        public void TestSettingEmptyKeyDoesNotThrowsException() =>
            Assert.DoesNotThrow(() =>
                HashFactory.XOF.CreateBlake2XS(ZeroByteArray, 256));

        [Test]
        public void TestSettingOutOfRangeSaltThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Salt = new byte[9]}, null), 256));

        [Test]
        public void TestSettingNullSaltThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Salt = NullBytes}, null), 256));

        [Test]
        public void TestSettingEmptySaltDoesNotThrow() =>
            Assert.DoesNotThrow(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Salt = ZeroByteArray}, null), 256));

        [Test]
        public void TestSettingNullPersonalizationThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Personalization = NullBytes},
                        null),
                    256));

        [Test]
        public void TestSettingOutOfRangePersonalizationThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Personalization = new byte[9]},
                        null),
                    256));

        [Test]
        public void TestSettingEmptyPersonalizationDoesNotThrowsException() =>
            Assert.DoesNotThrow(() =>
                _ = HashFactory.XOF.CreateBlake2XS(
                    Blake2XSConfig.CreateBlake2XSConfig(new Blake2SConfig(HashSize) {Personalization = ZeroByteArray},
                        null),
                    256));

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                HashFactory.XOF.CreateBlake2XS(ZeroByteArray, 0));

        [Test]
        public void TestCheckTestVectors()
        {
            var data = Converters.ConvertHexStringToBytes(Blake2BTestVectors.Blake2XBXofTestInput);
            foreach (var vector in Blake2STestVectors.Blake2XSXofTestVectors)
            {
                var key = Converters.ConvertHexStringToBytes(vector[0]);

                ActualString = HashFactory.XOF.CreateBlake2XS(key, (ulong) ((vector[1].Length >> 1) * 8))
                    .ComputeBytes(data).ToString();
                ExpectedString = vector[1];

                AssertAreEqual(ExpectedString.ToUpper(), ActualString);
            }
        }
    }

    [TestFixture]
    internal class Blake3XOFTest : XOFTestBase
    {
        [OneTimeSetUp]
        public void Setup()
        {
            HashInstance = HashFactory.XOF.CreateBlake3XOF(ZeroByteArray, 512);
            XofInstance = HashFactory.XOF.CreateBlake3XOF(ZeroByteArray, 8000);

            HashOfEmptyData =
                "AF1349B9F5F9A1A6A0404DEA36DCC9499BCB25C9ADC112B7CC9A93CAE41F3262E00F03E7B69AF26B7FAAF09FCD333050338DDFE085B8CC869CA98B206C08243A";
            HashOfDefaultData =
                "BB8DB7E4155BFDB254AD49D8D3105C57B6AC3E783E6D316A75E8B8F8911EB41F800B6ACB7F3593E1787BF62433D016B800B75C14C4E3E395FC5571ADEB1A7143";
            HashOfOneToNine =
                "B7D65B48420D1033CB2595293263B6F72EABEE20D55E699D0DF1973B3C9DEED15042F0A21EE5D17C59E507AE27E48A7CD85F69DCD816C5F421883F36E513D9FE";
            HashOfSmallLettersAToE =
                "0648C03B5AD9BB6DDF8306EEF6A33EBAE8F89CB4741150C1AE9CD662FDCC1EE2AB9CED8A57741468B7C3163AF41767186CE877C7AE21260064FD4EAD6004D549";
            XofOfEmptyData =
                "AF1349B9F5F9A1A6A0404DEA36DCC9499BCB25C9ADC112B7CC9A93CAE41F3262E00F03E7B69AF26B7FAAF09FCD333050338DDFE085B8CC869CA98B206C08243A26F5"
                + "487789E8F660AFE6C99EF9E0C52B92E7393024A80459CF91F476F9FFDBDA7001C22E159B402631F277CA96F2DEFDF1078282314E763699A31C5363165421CCE14D30F"
                + "8A03E49EE25D2EA3CD48A568957B378A65AF65FC35FB3E9E12B81CA2D82CDEE16C68908A6772F827564336933C89E6908B2F9C7D1811C0EB795CBD5898FE6F5E8AF7633"
                + "19CA863718A59AFF3D99660EF642483E217EF0C8785827284FEA90D42225E3CDD6A179BEE852FD24E7D45B38C27B9C2F9469EA8DBDB893F00E28534C7D15B59BADD5A5BDE"
                + "B090E98EB93C5B2F42101394ACB7C72E9B60094D5442096754600DB8C0FA6DBDFEA154C324C07BF17B7AB0D1488AE5EF76CB7611BAEF17087D84C08B4F950D3D85E00E7001"
                + "813FE029A10722BB003531D5AE406386E78CCA4CA7CACE8A41D294F6EE3B1C645832109B5B19304360B8AB79581E351C518849EAA7C7E14F37BA5B769D2CAF191F9DDEE2D49"
                + "82B6213947A7D047A03F5E456F2588F56E4075C756A319299FBA4001C4B6FB89FBFD93B0739DC684424A439CEFB447D5E191919C4581BC153BD2F2FAE39758F1322AE52EA8B2"
                + "D859887A71F70C03E28765709711950C2C06BF5C7D1BB6C235F722CE6DB047FE97CF74B87ADBD6531CB14A1193A8974F939DD2EB21335793880279905402DBDA8B5EC0A7C82A"
                + "69151BB42F7126E4157A510C6123139815BA3DF3FD1D810795D1F4F49CB8B0D63D8D07833CE95FCFF2B8B8677D1F6C3EE3CF2A00CE72A32E93F5E225A065A0726DC5C9AD5C26F"
                + "2C3560E401BA5079C3D63A8B29175BC9597B09A2BE664E6641F2D2EBFAFE58D5C025EE367396B4C0E31F9D761B779FF27DBAB678CFBB3C62460CC68A4C3187E9788E045EC92437"
                + "1C3027903A42059D1ED659406706C5E4381C931886A034E20689FFA78221E39B42326A9725C5D669D5E2ABAA1C4640AFC7E4D3A5FF5C5513F1B13BF865F4F02EC09453DBD0BCD1D0"
                + "AC3444141CC78B662F00811F095D1A1614EDCB516C70FB3BBF4C9ED58F8FBBDDE8CB1B5497585C53FB33EB7A98810780056C9952848F129D5A87DD36774C1B91E135C1ACEF799E6E4"
                + "320FB862C3619F6874CE0D7550D260308D7E309EEEA5026A534D37DFA4F703BF185C015D99D88A1E350639634D1C7F1DE79FAEBC0DFECAC66089E6F44C916DEBC12965DD0ECFDDF8A"
                + "D4CAFB5ABC45FC9FCA9780C26F457EA9DDCF5370A4D042BC5B9BFA87FAC10F88B170CD22CB9AB2255B251529272BADDF757AD471C4935363495B8E626421859FF304F6D5D527AAE2AF"
                + "7444F3E14C8CD41F9BB1E19A1418E08A5B535C79554";
        }

        [Test]
        public void TestSettingInvalidSizeThrowsCorrectException() =>
            Assert.Throws<ArgumentException>(() =>
                _ = HashFactory.XOF.CreateBlake3XOF(ZeroByteArray, 0));

        [Test]
        public void TestSettingNullKeyThrowsCorrectException() =>
            Assert.Throws<ArgumentNullException>(() =>
                _ = HashFactory.XOF.CreateBlake3XOF(NullBytes, 512));

        [Test]
        public void TestCheckTestVectors()
        {
            const string keyString = "whats the Elvish word for friend";

            var fullInput = Enumerable.Range(0, 1 << 15).Select(i => (byte) (i % 251)).ToArray();

            var key = Converters.ConvertStringToBytes(keyString, Encoding.UTF8);

            foreach (var vector in Blake3TestVectors.Blake3Vectors)
            {
                var chunkedInput = new byte[Convert.ToInt32(vector[0])];
                Array.Copy(fullInput, chunkedInput, chunkedInput.Length);

                var xof = HashFactory.XOF.CreateBlake3XOF(ZeroByteArray, (ulong) ((vector[1].Length >> 1) * 8));
                var keyedXof = HashFactory.XOF.CreateBlake3XOF(key, (ulong) ((vector[2].Length >> 1) * 8));

                var output = new byte[xof.XofSizeInBits / 8];
                var keyedOutput = new byte[keyedXof.XofSizeInBits / 8];

                xof.Initialize();
                keyedXof.Initialize();

                xof.TransformBytes(chunkedInput);
                keyedXof.TransformBytes(chunkedInput);

                xof.DoOutput(output, 0, (ulong) output.Length);
                keyedXof.DoOutput(keyedOutput, 0, (ulong) keyedOutput.Length);

                AssertAreEqual(output, Converters.ConvertHexStringToBytes(vector[1]),
                    $"{xof.Name} mismatch on xof Test");

                AssertAreEqual(keyedOutput, Converters.ConvertHexStringToBytes(vector[2]),
                    $"{keyedXof.Name} mismatch on keyedXof Test");
            }
        }
    }
}